{
  "paper": "2311.11177.txt",
  "words": 7667,
  "extractions": {
    "title": {
      "value": "Assessing the Security of GitHub Copilot’s Generated Code - A Targeted Replication Study",
      "justification": "This is the title of the paper",
      "quote": "Assessing the Security of GitHub Copilot’s Generated Code - A Targeted Replication Study"
    },
    "description": "This paper focuses on replicating a study that investigated the security weaknesses of code suggested by GitHub Copilot. By examining the security of Copilot with newer versions and using MITRE's CWE Top 25 Most Dangerous Software Weaknesses in Python code, the authors evaluate if improvements have been made in reducing vulnerable code suggestions. Their findings show that while there are reductions in vulnerabilities, Copilot still suggests insecure code.",
    "type": {
      "value": "Empirical Study",
      "justification": "The paper involves empirical examination and analysis of code generated by GitHub Copilot for security vulnerabilities across multiple scenarios.",
      "quote": "This paper replicates the study of Pearce et al., which investigated security weaknesses in Copilot and uncovered several weaknesses in the code suggested by Copilot across diverse scenarios and languages (Python, C and Verilog). Our replication examines Copilot’s security weaknesses using newer versions of Copilot and CodeQL (the security analysis framework)."
    },
    "primary_research_field": {
      "name": {
        "value": "Software Engineering",
        "justification": "The primary field of research is Software Engineering, as the paper examines the security aspects of AI-driven code generation, which is a key concern in software development.",
        "quote": "Several concerns have been raised about the security of the code generated by these models. Recent studies have investigated security issues in AI-powered code generation tools such as GitHub Copilot and Amazon CodeWhisperer, revealing several security weaknesses in the code generated by these tools."
      },
      "aliases": []
    },
    "sub_research_fields": [
      {
        "name": {
          "value": "AI-powered Code Generation",
          "justification": "Subfield focuses on AI-driven tools that help in code generation which the paper primarily investigates.",
          "quote": "AI-powered code generation models have been developing rapidly, allowing developers to expedite code generation and thus improve their productivity."
        },
        "aliases": []
      },
      {
        "name": {
          "value": "Security Analysis",
          "justification": "This subfield deals with analyzing and ensuring the security of the code generated by AI models.",
          "quote": "Generating code based on the training on publicly available code may result in code that inherits not just the intended functionality or behavior but also bugs and security issues."
        },
        "aliases": []
      }
    ],
    "models": [
      {
        "name": {
          "value": "GitHub Copilot",
          "justification": "The paper extensively studies GitHub Copilot by generating code suggestions and analyzing them for security weaknesses.",
          "quote": "As these tools evolve, it is expected that they will improve their security protocols to prevent the suggestion of insecure code to developers. This paper replicates the study of Pearce et al., which investigated security weaknesses in Copilot and uncovered several weaknesses in the code suggested by Copilot across diverse scenarios and languages (Python, C and Verilog)."
        },
        "aliases": [],
        "is_contributed": {
          "value": 0,
          "justification": "GitHub Copilot is the subject of the study, not the contribution.",
          "quote": "Our results indicate that, even with the improvements in newer versions of Copilot, the percentage of vulnerable code suggestions has reduced from 36.54% to 27.25%."
        },
        "is_executed": {
          "value": 1,
          "justification": "The paper describes the execution of Copilot to generate code suggestions which are then analyzed.",
          "quote": "The original study constructs three scenarios for each of “top 25” CWE’s and uses CodeQL or manual inspection to determine security issues present in the generated code."
        },
        "is_compared": {
          "value": 1,
          "justification": "Copilot's suggestions are compared against the baseline study by Pearce et al. for evaluating the improvement in security.",
          "quote": "The original study constructs three scenarios for each of “top 25” CWE’s and uses CodeQL or manual inspection to determine security issues present in the generated code."
        },
        "referenced_paper_title": {
          "value": "Evaluating large language models trained on code",
          "justification": "The referenced paper provides foundational details about the large language model Codex, upon which GitHub Copilot is built.",
          "quote": "Copilot is based on models built using OpenAI’s Codex [1], which interprets comments in natural language and executes them on the user’s behalf."
        }
      }
    ],
    "datasets": [
      {
        "name": {
          "value": "MITRE CWE Top 25 Most Dangerous Software Weaknesses",
          "justification": "The paper utilizes the top 25 weaknesses from MITRE to create code generation prompts for evaluating Copilot.",
          "quote": "We used Copilot to generate code suggestions using prompts based on 12 CWEs from MITRE’s CWE Top 25 Most Dangerous Software Weaknesses."
        },
        "aliases": [],
        "role": "used",
        "referenced_paper_title": {
          "value": "CWE List Version 4.12",
          "justification": "The dataset is referred to from the CWE List maintained by MITRE which is updated regularly.",
          "quote": "A recent study on the security weaknesses in Copilot-generated code found in publicly available GitHub projects (using multiple languages) shows that over 35% of Copilot-generated code snippets contain CWEs. It also reported the security weaknesses are diverse in nature and related to 42 different CWEs (from MITRE’s list) [15] (including CWEs that appear in MITRE’s 2022 list)."
        }
      }
    ],
    "libraries": [
      {
        "name": {
          "value": "CodeQL",
          "justification": "CodeQL is used to determine security issues present in the generated code by Copilot.",
          "quote": "Our replication examines Copilot’s security weaknesses using newer versions of Copilot and CodeQL (the security analysis framework)."
        },
        "aliases": [],
        "role": "used",
        "referenced_paper_title": {
          "value": "None",
          "justification": "The paper does not reference another paper explicitly for CodeQL.",
          "quote": "CodeQL analysis was conducted on a machine with an Intel Xeon E5-2690 v3 processor with a memory of 128GB DDR4 RAM running Ubuntu 20.04.5 LTS."
        }
      }
    ]
  },
  "usage": {
    "completion_tokens": 1216,
    "prompt_tokens": 13702,
    "total_tokens": 14918
  }
}