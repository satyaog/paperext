{
  "paper": "EQpGkw5rvL.txt",
  "words": 12023,
  "extractions": {
    "title": {
      "value": "Lookback for Learning to Branch",
      "justification": "The title is directly mentioned at the beginning of the paper.",
      "quote": "Lookback for Learning to Branch Prateek Gupta, University of Oxford, The Alan Turing Institute Elias B. Khalil, University of Toronto Didier Ch√©telat..."
    },
    "description": "This paper discusses the use of Graph Neural Networks (GNNs) to improve branching decisions in Mixed-Integer Linear Programming (MILP) solvers. The authors introduce the 'lookback' phenomenon where they propose incorporating dependencies in the GNN training process to imitate strong branching decisions more closely. The paper also proposes a model selection framework targeting objectives like solving time, aiming for more efficient MILP solving.",
    "type": {
      "value": "empirical",
      "justification": "The paper involves extensive experimentation and validation of the proposed methods through benchmark instances, indicating an empirical approach.",
      "quote": "Finally, we propose a model selection framework that directly considers harder-to-formulate objectives such as solving time. Through extensive experimentation on standard benchmark instances, we show that our proposal leads to decreases of up to 22% in the size of the B&B tree and up to 15% in the solving times."
    },
    "primary_research_field": {
      "name": {
        "value": "Mixed-Integer Linear Programming",
        "justification": "The research focuses on enhancing MILP solvers using deep learning techniques.",
        "quote": "The expressive and computationally efficient bipartite Graph Neural Networks (GNN) have been shown to be an important component of deep learning enhanced Mixed-Integer Linear Programming (MILP) solvers."
      },
      "aliases": [
        "MILP"
      ]
    },
    "sub_research_fields": [
      {
        "name": {
          "value": "Graph Neural Networks",
          "justification": "The paper specifically uses Graph Neural Networks for learning to branch in MILP.",
          "quote": "Gasse et al. (2019) proposed to use Graph Neural Network (GNN) for the variable selection problem to imitate the branching decisions of a computationally expensive strong branching heuristic..."
        },
        "aliases": [
          "GNN"
        ]
      }
    ],
    "models": [
      {
        "name": {
          "value": "GNN-PAT",
          "justification": "The paper introduces GNN-PAT as a key contribution to enhance branching decision-making in MILP solvers by incorporating the lookback phenomenon.",
          "quote": "Finally, we propose a model selection framework that directly considers harder-to-formulate objectives such as solving time. Through extensive experimentation on standard benchmark instances, we show that our proposal leads to decreases of up to 22% in the size of the B&B tree and up to 15% in the solving times."
        },
        "aliases": [],
        "is_contributed": {
          "value": true,
          "justification": "GNN-PAT is a novel model proposed in this paper, adding lookback regularization to existing GNN models for improved performance.",
          "quote": "The GNN-PAT solves test instances faster than other baselines resulting in (g) less time as compared to GNNs."
        },
        "is_executed": {
          "value": true,
          "justification": "The paper provides results and comparisons of the GNN-PAT model, indicating that it was executed during the research.",
          "quote": "The GNN-PAT solves test instances faster than other baselines resulting in (g) less time as compared to GNNs."
        },
        "is_compared": {
          "value": true,
          "justification": "GNN-PAT is compared against other models such as traditional GNNs and baseline strategies within the experiments conducted.",
          "quote": "We plot the range-normalized (range is specified in parenthesis) Time and Node performance of the selected models..."
        },
        "referenced_paper_title": {
          "value": "Exact combinatorial optimization with graph convolutional neural networks",
          "justification": "GNNs, which are central to this paper and preceding works, were discussed and proposed in Gasse et al. (2019).",
          "quote": "Gasse et al. (2019) proposed to use Graph Neural Network (GNN) for the variable selection problem to imitate the branching decisions..."
        }
      }
    ],
    "datasets": [],
    "libraries": [
      {
        "name": {
          "value": "PyTorch",
          "justification": "PyTorch is used for implementing the models in the paper.",
          "quote": "Our models are all implemented in PyTorch (Paszke et al., 2017)."
        },
        "aliases": [],
        "role": "used",
        "referenced_paper_title": {
          "value": "Automatic differentiation in pytorch",
          "justification": "The PyTorch library is attributed to its foundational paper by Paszke et al. 2017 in references.",
          "quote": "Our models are all implemented in PyTorch (Paszke et al., 2017)."
        }
      }
    ]
  },
  "usage": {
    "completion_tokens": 918,
    "prompt_tokens": 20064,
    "total_tokens": 20982,
    "completion_tokens_details": {
      "accepted_prediction_tokens": null,
      "audio_tokens": 0,
      "reasoning_tokens": 0,
      "rejected_prediction_tokens": null
    },
    "prompt_tokens_details": {
      "audio_tokens": 0,
      "cached_tokens": 1152
    }
  }
}